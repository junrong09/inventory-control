{"version":3,"sources":["FixtureSelector/FixtureSelector.js","HeaderPage/HeaderPage.js","StartPage/StartPage.js","App.js","serviceWorker.js","index.js"],"names":["FixtureSelector","props","this","className","TextField","id","label","margin","variant","to","Button","color","Component","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","HeaderPage","AppBar","position","Toolbar","Typography","StartPage","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7ecb6e9d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button'\r\nimport './FixtureSelector.css'\r\nimport { Link  } from \"react-router-dom\";\r\n\r\nclass FixtureSelector extends Component {\r\n\r\n    FixtureSelector(props) {\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <TextField\r\n                    id=\"outlined-name\"\r\n                    label=\"Name\"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                />\r\n                <Link  to=\"/start\"><Button variant=\"contained\" color=\"secondary\">Proceed</Button></Link >\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default FixtureSelector;","import React, { Component } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FixtureSelector from '../FixtureSelector/FixtureSelector.js';\r\nimport './HeaderPage.css'\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(3),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nclass HeaderPage extends Component {\r\n\r\n    HeaderPage() { }\r\n\r\n    render() {\r\n        return (<div className={useStyles.root}>\r\n            <AppBar position=\"static\" color=\"secondary\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={useStyles.title}>\r\n                        Inventory Control\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <FixtureSelector />\r\n        </div>);\r\n    }\r\n}\r\nexport default HeaderPage;","import React, { Component } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport './StartPage.css'\r\nimport Button from '@material-ui/core/Button'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(3),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nclass StartPage extends Component {\r\n\r\n    StartPage() { }\r\n\r\n    getName() {\r\n        return 'My name is start page.';\r\n    }\r\n\r\n    render() {\r\n        return (<div className={useStyles.root}>\r\n            <AppBar position=\"static\" color=\"secondary\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={useStyles.title}>\r\n                        Inventory Control - Start\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <h5>Start page.</h5>\r\n            <Link to=\"/\"><Button variant=\"contained\" color=\"secondary\">Back to Home</Button></Link >\r\n        </div>);\r\n    }\r\n}\r\nexport default StartPage;","import React from 'react';\r\nimport HeaderPage from './HeaderPage/HeaderPage.js'\r\nimport StartPage from './StartPage/StartPage.js'\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Route exact path=\"/\" component={HeaderPage} />\r\n        <Route path=\"/start\" component={StartPage} />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}