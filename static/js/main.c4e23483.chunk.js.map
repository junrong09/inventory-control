{"version":3,"sources":["FixtureSelector/FixtureSelector.js","HeaderPage/HeaderPage.js","CountStartPage/CountStartPage.js","App.js","serviceWorker.js","index.js"],"names":["FixtureSelector","props","handleFixtureIdChange","bind","handleFixtureSave","state","fixtureId","event","this","setState","target","value","console","log","className","TextField","id","label","margin","variant","onChange","to","Button","color","onClick","Component","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","HeaderPage","testParam","AppBar","position","Toolbar","Typography","StartPage","App","basename","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0bAsCeA,E,YA9BX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,sBAAwB,EAAKA,sBAAsBC,KAA3B,gBAC7B,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,MAAQ,CAACC,UAAW,MAJV,E,mFAOGC,GAClBC,KAAKC,SAAS,CAACH,UAAWC,EAAMG,OAAOC,U,0CAIvCC,QAAQC,IAAIL,KAAKH,MAAMC,a,+BAIvB,OACI,yBAAKQ,UAAU,aACX,kBAACC,EAAA,EAAD,CACIC,GAAG,gBACHC,MAAM,aACNC,OAAO,SACPC,QAAQ,WACRC,SAAUZ,KAAKN,wBAEnB,kBAAC,IAAD,CAAMmB,GAAG,UAAS,kBAACC,EAAA,EAAD,CAAQH,QAAQ,YAAYI,MAAM,YAAYC,QAAShB,KAAKJ,mBAA5D,iB,GA3BJqB,aCExBC,G,MAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaL,EAAMM,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,SA0BPK,E,YAnBX,WAAYnC,GAAQ,IAAD,8BACf,4CAAMA,KACDI,MAAQ,CAACgC,UAAWpC,EAAMoC,WAC/BzB,QAAQC,IAAI,EAAKR,OAHF,E,sEAOf,OAAQ,yBAAKS,UAAWY,EAAUI,MAC9B,kBAACQ,EAAA,EAAD,CAAQC,SAAS,SAAShB,MAAM,aAC5B,kBAACiB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYtB,QAAQ,KAAKL,UAAWY,EAAUS,OAA9C,uBAKR,kBAAC,EAAD,W,GAjBaV,aCbnBC,G,MAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaL,EAAMM,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,SA2BPW,E,uNAjBP,MAAO,2B,+BAIP,OAAQ,yBAAK5B,UAAWY,EAAUI,MAC9B,kBAACQ,EAAA,EAAD,CAAQC,SAAS,SAAShB,MAAM,aAC5B,kBAACiB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYtB,QAAQ,KAAKL,UAAWY,EAAUS,OAA9C,+BAKR,2CACA,kBAAC,IAAD,CAAMd,GAAG,KAAI,kBAACC,EAAA,EAAD,CAAQH,QAAQ,YAAYI,MAAM,aAAlC,sB,GAlBDE,a,cCNTkB,MAXf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAS,sBACf,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAAK,kBAAC,EAAD,CAAYT,UAAU,gBAC7C,kBAAC,IAAD,CAAOS,KAAK,UAAS,kBAAC,EAAD,UCCvBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzD,QACfmD,UAAUC,cAAcQ,YAI1BrD,QAAQC,IACN,iHAKE0C,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBhD,QAAQC,IAAI,sCAGR0C,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAC,GACLzD,QAAQyD,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,qBAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,qBAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,GACHK,MAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BV,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLxD,QAAQC,IACN,oEArFA4E,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjC/C,QAAQC,IACN,iHAMJwC,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.c4e23483.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button'\nimport './FixtureSelector.css'\nimport { Link } from \"react-router-dom\";\n\nclass FixtureSelector extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleFixtureIdChange = this.handleFixtureIdChange.bind(this);\n        this.handleFixtureSave = this.handleFixtureSave.bind(this);\n        this.state = {fixtureId: null};\n    }\n\n    handleFixtureIdChange(event) {\n        this.setState({fixtureId: event.target.value});\n    }\n\n    handleFixtureSave() {\n        console.log(this.state.fixtureId);\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <TextField\n                    id=\"outlined-name\"\n                    label=\"Fixture ID\"\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    onChange={this.handleFixtureIdChange}\n                />\n                <Link to=\"/start\"><Button variant=\"contained\" color=\"secondary\" onClick={this.handleFixtureSave}>Proceed</Button></Link >\n            </div>\n        );\n    }\n}\nexport default FixtureSelector;","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport FixtureSelector from '../FixtureSelector/FixtureSelector.js';\nimport './HeaderPage.css'\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1\n        },\n        menuButton: {\n            marginRight: theme.spacing(3),\n        },\n        title: {\n            flexGrow: 1,\n        },\n    }),\n);\n\nclass HeaderPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {testParam: props.testParam};\n        console.log(this.state);\n    }\n\n    render() {\n        return (<div className={useStyles.root}>\n            <AppBar position=\"static\" color=\"secondary\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={useStyles.title}>\n                        Inventory Control\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <FixtureSelector />\n        </div>);\n    }\n}\nexport default HeaderPage;","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport './CountStartPage.css'\nimport Button from '@material-ui/core/Button'\nimport { Link } from 'react-router-dom'\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1\n        },\n        menuButton: {\n            marginRight: theme.spacing(3),\n        },\n        title: {\n            flexGrow: 1,\n        },\n    }),\n);\n\nclass StartPage extends Component {\n\n    StartPage() { }\n\n    getName() {\n        return 'My name is start page.';\n    }\n\n    render() {\n        return (<div className={useStyles.root}>\n            <AppBar position=\"static\" color=\"secondary\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={useStyles.title}>\n                        Inventory Control - Start\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <h5>Start page.</h5>\n            <Link to=\"/\"><Button variant=\"contained\" color=\"secondary\">Back to Home</Button></Link >\n        </div>);\n    }\n}\nexport default StartPage;","import React from 'react';\nimport HeaderPage from './HeaderPage/HeaderPage.js'\nimport CountStartPage from './CountStartPage/CountStartPage.js'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename=\"/inventory-control\">\n      <div>\n        <Route exact path=\"/\" ><HeaderPage testParam=\"test value\"/></Route>\n        <Route path=\"/start\"><CountStartPage /></Route>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}