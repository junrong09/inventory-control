{"version":3,"sources":["StateManagement/Constants.js","HeaderPage/HeaderPage.js","StateManagement/Actions.js","CountStartPage/CountStartPage.js","App.js","serviceWorker.js","StateManagement/Reducer.js","StateManagement/Store.js","index.js"],"names":["ADD_SKU","SCAN_FIXTURE","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","ConnectedHeaderPage","props","state","fixtureId","handleFixtureIdChange","bind","handleSubmit","isButtonDisabled","event","this","setState","target","value","scanFixture","className","AppBar","position","color","Toolbar","Typography","variant","TextField","id","label","margin","onChange","to","style","textDecoration","Button","disabled","width","fullWidth","onClick","Component","HeaderPage","connect","dispatch","type","ACTION_CONSTANTS","payload","CountStartPage","enableCounting","fontSize","marginBottom","textTransform","display","App","basename","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialState","startTime","skuList","rootReducer","action","Object","assign","concat","skuId","store","createStore","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.561efe4b.chunk.js","sourcesContent":["export const ADD_SKU = \"ADD_SKU\";\nexport const SCAN_FIXTURE = \"SCAN_FIXTURE\";","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { Link } from \"react-router-dom\";\nimport './HeaderPage.css';\nimport { connect } from 'react-redux';\nimport { scanFixture } from '../StateManagement/Actions';\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1\n        },\n        menuButton: {\n            marginRight: theme.spacing(3),\n        },\n        title: {\n            flexGrow: 1,\n        },\n    }),\n);\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        scanFixture: fixtureId => dispatch(scanFixture(fixtureId))\n    };\n}\n\nclass ConnectedHeaderPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { fixtureId: null };\n        this.handleFixtureIdChange = this.handleFixtureIdChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.isButtonDisabled = this.isButtonDisabled.bind(this);\n    }\n\n    handleFixtureIdChange(event) {\n        this.setState({ fixtureId: event.target.value });\n    }\n\n    handleSubmit(event) {\n        const { fixtureId } = this.state;\n        this.props.scanFixture({ fixtureId });\n        this.setState({ fixtureId: \"\" });\n    }\n\n    isButtonDisabled() {\n        return !this.state.fixtureId;\n    }\n\n    render() {\n        return (<div className={useStyles.root}>\n            <AppBar position=\"static\" color=\"secondary\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={useStyles.title}>\n                        Inventory Control\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <div className=\"container\">\n                <TextField\n                    id=\"outlined-name\"\n                    label=\"Fixture ID\"\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    onChange={this.handleFixtureIdChange}\n                />\n                <Link to=\"/start\" style={{ textDecoration: 'none' }}>\n                    <Button disabled={this.isButtonDisabled()} style={{ width: '100%' }} fullWidth={true} variant=\"contained\" color=\"secondary\" onClick={this.handleSubmit}>\n                        Proceed\n                    </Button>\n                </Link >\n            </div>\n        </div>);\n    }\n}\nconst HeaderPage = connect(\n    null,\n    mapDispatchToProps\n)(ConnectedHeaderPage);\n\nexport default HeaderPage;","import * as ACTION_CONSTANTS from './Constants';\n\nexport function scanCsku(payload) {\n    return { type: ACTION_CONSTANTS.ADD_SKU, payload };\n}\n\nexport function scanFixture(payload) {\n    return { type: ACTION_CONSTANTS.SCAN_FIXTURE, payload };\n}","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport './CountStartPage.css'\nimport Button from '@material-ui/core/Button'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1\n        }\n    })\n);\n\nconst mapStateToProps = state => {\n    return { fixtureId: state.fixtureId };\n};\n\nconst ConnectedCountStartPage = ({ fixtureId, enableCounting }) => {\n    return (<div className={useStyles.root}>\n        <AppBar position=\"static\" color=\"secondary\">\n            <Toolbar>\n                <Typography variant=\"h6\">\n                    Inventory Control\n                    </Typography>\n            </Toolbar>\n        </AppBar>\n        <Typography variant=\"overline\" style={{ fontSize: 21, margin: 10, marginBottom: 0, textTransform: 'uppercase' }} >Fixture ID:\n        <Typography variant=\"overline\" style={{ fontSize: 21, margin: 10, marginBottom: 0, textDecoration: 'underline' }} >{fixtureId}</Typography>\n        </Typography>\n        <div id=\"buttonWrapper\" style={{ display: 'flex-vertical', flexGrow: 2, margin: 10 }}>\n            <Button style={{ width: '100%', marginBottom: 10 }} variant=\"contained\" color=\"secondary\" >\n                Start Scanning\n            </Button>\n            <Link to=\"/\" style={{ textDecoration: 'none' }}>\n                <Button style={{ width: '100%' }} variant=\"contained\" color=\"secondary\">\n                    Back to Home\n            </Button>\n            </Link >\n        </div>\n    </div>);\n}\nconst CountStartPage = connect(mapStateToProps)(ConnectedCountStartPage);\nexport default CountStartPage;","import React from 'react';\nimport HeaderPage from './HeaderPage/HeaderPage.js'\nimport CountStartPage from './CountStartPage/CountStartPage.js'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename=\"/inventory-control\">\n      <div>\n        <Route exact path=\"/\" ><HeaderPage /></Route>\n        <Route exact path=\"/start\"><CountStartPage /></Route>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as ACTION_CONSTANTS from './Constants'\n\nconst initialState = {\n    fixtureId: null, startTime: null, skuList: []\n};\nfunction rootReducer(state = initialState, action) {\n    if (action.type === ACTION_CONSTANTS.ADD_SKU) {\n        return Object.assign({}, state, {\n            skuList: state.skuList.concat(action.payload).skuId\n          });\n    } else if (action.type === ACTION_CONSTANTS.SCAN_FIXTURE) {\n        return Object.assign({}, state, {\n            fixtureId: action.payload.fixtureId\n          });\n    }\n    return state;\n};\nexport default rootReducer;\n\n\n\n","import { createStore } from \"redux\";\nimport rootReducer from \"./Reducer.js\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from './StateManagement/Store.js';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}