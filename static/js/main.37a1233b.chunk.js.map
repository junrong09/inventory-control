{"version":3,"sources":["serviceWorker.js","CommonComponents/HeaderBar.js","StateManagement/Constants.js","StateManagement/Actions.js","HeaderPage/HeaderPage.js","CountStartPage/CountStartPage.js","ScanPage/ScanPage.js","ReviewPage/EditableTable.js","ControllerInteface/ApiCaller.js","ReviewPage/ReviewPage.js","App.js","StateManagement/Reducer.js","StateManagement/Store.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","HeaderBar","props","title","AppBar","position","color","Toolbar","Typography","variant","style","fontWeight","this","Component","ADD_SKUS","SCAN_FIXTURE","SET_USER_ID","scanSkus","payload","type","ACTION_CONSTANTS","scanFixture","ConnectedHeaderPage","handleFixtureIdChange","event","setState","fixtureId","target","value","handleUserIdChange","userId","handleSubmit","setUserId","isButtonDisabled","className","TextField","id","label","margin","onChange","autoFocus","to","Button","disabled","fullWidth","onClick","HeaderPage","connect","dispatch","ConnectedCountStartPage","width","marginBottom","push","CountStartPage","ConnectedScanPage","handleSkuIdChange","currentSku","scannerMode","handleSkuSaveWithId","resetState","skuCountList","returnFocus","textField","current","focus","setAttribute","setTimeout","removeAttribute","handleSwitchToggle","skuId","skuList","handleSkuSave","isScanDisabled","getSkuTable","Object","entries","length","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","map","keys","key","submitCount","sendSkuCountList","disableButton","React","createRef","FormControlLabel","control","Switch","checked","inputRef","ScanPage","EditableTable","onCountChange","tuple","valChange","list","assign","setSkuCountList","tableRow","data","selectedKey","selected","align","saveStocktake","stocks","stockArray","e","cskuId","count","fetch","URL","method","headers","body","JSON","stringify","res","text","err","ConnectedReviewPage","setFixtureId","dialogOpen","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","DialogActions","getDialogBox","App","basename","exact","path","ReviewPage","initialState","startTime","rootReducer","action","store","createStore","ReactDOM","render","document","getElementById","process","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.37a1233b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default class HeaderBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: props.title\n    };\n  }\n\n  render() {\n    return (\n      <AppBar position=\"static\" color=\"secondary\">\n        <Toolbar>\n          <Typography variant=\"h6\" style={{ fontWeight: \"bold\" }}>\n            {this.state.title}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n","export const ADD_SKUS = \"ADD_SKUS\";\nexport const SCAN_FIXTURE = \"SCAN_FIXTURE\";\nexport const SET_USER_ID = \"SET_USER_ID\";\n","import * as ACTION_CONSTANTS from \"./Constants\";\n\nexport function scanSkus(payload) {\n  return { type: ACTION_CONSTANTS.ADD_SKUS, payload };\n}\n\nexport function scanFixture(payload) {\n  return { type: ACTION_CONSTANTS.SCAN_FIXTURE, payload };\n}\n\nexport function setUserId(payload) {\n  return { type: ACTION_CONSTANTS.SET_USER_ID, payload };\n}\n","import React, { Component } from \"react\";\nimport HeaderBar from \"../CommonComponents/HeaderBar.js\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { scanFixture, setUserId } from \"../StateManagement/Actions\";\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    scanFixture: fixtureId => dispatch(scanFixture(fixtureId)),\n    setUserId: userId => dispatch(setUserId(userId))\n  };\n}\n\nclass ConnectedHeaderPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { fixtureId: null, userId: null };\n  }\n\n  handleFixtureIdChange = event =>\n    this.setState({ fixtureId: event.target.value });\n  handleUserIdChange = event => this.setState({ userId: event.target.value });\n  handleSubmit = event => {\n    const { fixtureId, userId } = this.state;\n    this.props.scanFixture({ fixtureId });\n    this.props.setUserId({ userId });\n    this.setState({ fixtureId: \"\" });\n  };\n  isButtonDisabled = () => !this.state.fixtureId || !this.state.userId;\n\n  render() {\n    return (\n      <div>\n        <HeaderBar title=\"Inventory Control\" />\n        <div className=\"flex flex-column ma3\">\n          <TextField\n            id=\"outlined-name\"\n            label=\"User ID\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleUserIdChange}\n          />\n          <TextField\n            autoFocus\n            id=\"outlined-name\"\n            label=\"Fixture ID\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleFixtureIdChange}\n          />\n          <Link to=\"/start\" className=\"noLink\">\n            <Button\n              disabled={this.isButtonDisabled()}\n              className=\"w-100\"\n              fullWidth={true}\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={this.handleSubmit}\n            >\n              Proceed\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\nconst HeaderPage = connect(null, mapDispatchToProps)(ConnectedHeaderPage);\n\nexport default HeaderPage;\n","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport HeaderBar from \"../CommonComponents/HeaderBar.js\";\n\nconst mapStateToProps = state => {\n  return { fixtureId: state.fixtureId };\n};\n\nclass ConnectedCountStartPage extends Component {\n  render() {\n    if (!this.props.fixtureId) {\n      return <Redirect push to=\"/\" />;\n    }\n\n    return (\n      <div>\n        <HeaderBar title=\"Inventory Control\" />\n        <div className=\"ma2\">\n          <span className=\"f4 mr2\">FIXTURE ID:</span>\n          <span className=\"underline f4\">{this.props.fixtureId}</span>\n        </div>\n        <div className=\"flex flex-column ma3\">\n          <Link to=\"/scan\" className=\"noLink\">\n            <Button\n              style={{ width: \"100%\", marginBottom: 10 }}\n              variant=\"contained\"\n              color=\"secondary\"\n            >\n              Start Scanning\n            </Button>\n          </Link>\n          <Link to=\"/\" className=\"noLink\">\n            <Button className=\"w-100\" variant=\"contained\" color=\"secondary\">\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst CountStartPage = connect(mapStateToProps)(ConnectedCountStartPage);\nexport default CountStartPage;\n","import React, { Component } from \"react\";\nimport HeaderBar from \"../CommonComponents/HeaderBar.js\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { Redirect } from \"react-router\";\nimport { scanSkus } from \"../StateManagement/Actions\";\n\nconst mapStateToProps = state => {\n  return { fixtureId: state.fixtureId, skuCountList: state.skuCountList };\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    sendSkuCountList: skuCountList => dispatch(scanSkus(skuCountList))\n  };\n}\n\nexport class ConnectedScanPage extends Component {\n  constructor(props) {\n    super(props);\n    this.textField = React.createRef();\n    this.state = {\n      currentSku: \"\",\n      scannerMode: true,\n      skuCountList: {}\n    };\n  }\n\n  handleSkuIdChange = event => {\n    this.setState({\n      currentSku: event.target.value\n    });\n    if (this.state.scannerMode) {\n      this.handleSkuSaveWithId(event.target.value);\n    }\n  };\n\n  resetState = () => {\n    this.setState({\n      currentSku: \"\",\n      skuCountList: {}\n    });\n    this.returnFocus();\n  };\n\n  returnFocus = () => {\n    if (this.textField.current == null) return;\n    this.textField.current.focus();\n    if (this.state.scannerMode) {\n      // Hide virtual keyboard\n      this.textField.current.setAttribute(\"readonly\", true);\n      setTimeout(() => {\n        this.textField.current.removeAttribute(\"readonly\");\n      }, 100);\n    }\n  };\n\n  handleSwitchToggle = () => {\n    this.setState(\n      {\n        scannerMode: !this.state.scannerMode\n      },\n      this.returnFocus\n    );\n  };\n\n  handleSkuSaveWithId = skuId => {\n    var skuList = this.state.skuCountList;\n    if (this.state.skuCountList[skuId]) {\n      skuList[skuId] = this.state.skuCountList[skuId] + 1;\n    } else if (skuId) {\n      skuList[skuId] = 1;\n    }\n    this.setState({ skuCountList: skuList, currentSku: \"\" });\n    this.returnFocus();\n  };\n\n  handleSkuSave = () => {\n    this.handleSkuSaveWithId(this.state.currentSku);\n  };\n\n  isScanDisabled = () => {\n    if (this.state.scannerMode) {\n      return true;\n    }\n    return !this.state.currentSku;\n  };\n\n  getSkuTable = () => {\n    if (\n      this.state.skuCountList &&\n      Object.entries(this.state.skuCountList).length > 0\n    ) {\n      return (\n        <Table stickyHeader>\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <span className=\"f5\">SKU ID</span>\n              </TableCell>\n              <TableCell>\n                <span className=\"f5\">Count</span>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {Object.entries(this.state.skuCountList).map(keys => (\n              <TableRow key={keys[0]}>\n                <TableCell>{keys[0]}</TableCell>\n                <TableCell>{keys[1]}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      );\n    }\n  };\n\n  submitCount = event => {\n    const { skuCountList } = this.state;\n    this.props.sendSkuCountList({ skuCountList });\n  };\n\n  disableButton = () =>\n    !this.state.skuCountList ||\n    Object.entries(this.state.skuCountList).length === 0;\n\n  componentDidMount() {\n    this.returnFocus();\n  }\n\n  render() {\n    if (!this.props.fixtureId) {\n      return <Redirect push to=\"/\" />;\n    }\n    return (\n      <div>\n        <HeaderBar title=\"Inventory Control\" />\n        <div className=\"flex flex-column ma3\">\n          <div className=\"flex justify-between\">\n            <div className=\"ma2\">\n              <span className=\"f4 mr2\">FIXTURE ID:</span>\n              <span className=\"underline f4\">{this.props.fixtureId}</span>\n            </div>\n            <FormControlLabel\n              control={\n                <Switch\n                  onChange={this.handleSwitchToggle}\n                  checked={this.state.scannerMode}\n                />\n              }\n              label=\"Scanner Mode\"\n            />\n          </div>\n          <TextField\n            id=\"outlined-name\"\n            label=\"CSKU ID\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            autoFocus\n            inputRef={this.textField}\n            value={this.state.currentSku}\n            onChange={this.handleSkuIdChange}\n            onClick={this.returnFocus}\n          />\n          <div className=\"flex flex-column\">\n            <Button\n              style={{ width: \"100%\", marginBottom: 20 }}\n              variant=\"contained\"\n              color=\"secondary\"\n              disabled={this.isScanDisabled()}\n              onClick={this.handleSkuSave}\n            >\n              Scan\n            </Button>\n            <Button\n              style={{ width: \"100%\", marginBottom: 10 }}\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={this.resetState}\n            >\n              Clear\n            </Button>\n            <Link to=\"/review\" className=\"noLink\">\n              <Button\n                style={{ width: \"100%\", marginBottom: 10 }}\n                disabled={this.disableButton()}\n                variant=\"contained\"\n                onClick={this.submitCount}\n                color=\"primary\"\n              >\n                Review\n              </Button>\n            </Link>\n            <Link to=\"/start\" className=\"noLink\">\n              <Button\n                style={{ width: \"100%\" }}\n                variant=\"contained\"\n                color=\"secondary\"\n              >\n                Return\n              </Button>\n            </Link>\n          </div>\n          <div>{this.getSkuTable()}</div>\n        </div>\n      </div>\n    );\n  }\n}\nconst ScanPage = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ConnectedScanPage);\nexport default ScanPage;\n","import React, { Component } from \"react\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Table from \"@material-ui/core/Table\";\n\nexport class EditableTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedKey: null\n    };\n  }\n\n  onCountChange = (tuple, valChange) => {\n    let list = Object.assign({}, this.props.skuCountList);\n    list[tuple[0]] = tuple[1] + valChange;\n    this.props.setSkuCountList({ skuCountList: list });\n  };\n\n  tableRow = data => {\n    let row;\n    if (data[0] === this.state.selectedKey) {\n      row = (\n        <TableRow key={data[0]} selected={true}>\n          <TableCell align=\"center\">{data[0]}</TableCell>\n          <TableCell align=\"center\">\n            <button\n              className=\"b--none bg-transparent f3 mr2\"\n              onClick={() => this.onCountChange(data, 1)}\n            >\n              +\n            </button>\n            {data[1]}\n            {data[1] > 1 ? (\n              <button\n                className=\"b--none bg-transparent f3 ml2\"\n                onClick={() => this.onCountChange(data, -1)}\n              >\n                -\n              </button>\n            ) : (\n              <button className=\"b--none bg-transparent f3 ml2\" disabled>\n                -\n              </button>\n            )}\n          </TableCell>\n        </TableRow>\n      );\n    } else {\n      row = (\n        <TableRow\n          key={data[0]}\n          onClick={() => {\n            this.setState({ selectedKey: data[0] });\n          }}\n        >\n          <TableCell align=\"center\">{data[0]}</TableCell>\n          <TableCell align=\"center\">{data[1]}</TableCell>\n        </TableRow>\n      );\n    }\n    return row;\n  };\n\n  render() {\n    console.log(this.props.skuCountList);\n    return (\n      <Table stickyHeader>\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\">\n              <span className=\"f5\">SKU ID</span>\n            </TableCell>\n            <TableCell align=\"center\">\n              <span className=\"f5\">Count</span>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {Object.entries(this.props.skuCountList).map(keys =>\n            this.tableRow(keys)\n          )}\n        </TableBody>\n      </Table>\n    );\n  }\n}\n","const URL = \"http://localhost:3001/\";\nconst POST_SUBMISSION = URL + \"submission\";\n\nexport const saveStocktake = (userId, fixtureId, stocks) => {\n  let stockArray = [];\n  for (let e of Object.entries(stocks)) {\n    stockArray.push({ cskuId: e[0], count: e[1] });\n  }\n\n  fetch(POST_SUBMISSION, {\n    method: \"post\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      fixtureId: fixtureId,\n      userId: userId,\n      stocks: stockArray\n    })\n  })\n    .then(res => res.text())\n    .then(res => {\n      console.log(res);\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n","import React, { Component } from \"react\";\nimport HeaderBar from \"../CommonComponents/HeaderBar.js\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport { scanFixture, scanSkus } from \"../StateManagement/Actions\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { EditableTable } from \"./EditableTable\";\nimport { saveStocktake } from \"../ControllerInteface/ApiCaller\";\n\nconst mapStateToProps = state => {\n  return {\n    fixtureId: state.fixtureId,\n    skuCountList: state.skuCountList,\n    userId: state.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSkuCountList: skuCountList => dispatch(scanSkus(skuCountList)),\n    setFixtureId: fixtureId => dispatch(scanFixture(fixtureId))\n  };\n};\n\nexport class ConnectedReviewPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dialogOpen: false\n    };\n  }\n\n  submitCount = () => {\n    console.log(this.props.skuCountList);\n    let { userId, fixtureId, skuCountList } = this.props;\n    saveStocktake(userId, fixtureId, skuCountList);\n    this.props.setSkuCountList({});\n    this.props.setFixtureId({});\n  };\n\n  disableButton = () =>\n    !this.props.skuCountList ||\n    Object.entries(this.props.skuCountList).length === 0;\n\n  getDialogBox() {\n    return (\n      <Dialog\n        open={this.state.dialogOpen}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Finished scanning?\"}\n        </DialogTitle>\n        <DialogActions>\n          <Button onClick={this.submitCount} color=\"primary\">\n            Yes\n          </Button>\n          <Button\n            onClick={() => {\n              this.setState({\n                dialogOpen: false\n              });\n            }}\n            color=\"primary\"\n            autoFocus\n          >\n            No\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  render() {\n    if (!this.props.fixtureId) {\n      return <Redirect push to=\"/\" />;\n    }\n    return (\n      <div>\n        <HeaderBar title=\"Inventory Control\" />\n        <div className=\"flex flex-column ma3\">\n          <div className=\"flex ma2\">\n            <span className=\"f4 mr2\">FIXTURE ID:</span>\n            <span className=\"underline f4\">{this.props.fixtureId}</span>\n          </div>\n          <div>\n            <EditableTable\n              skuCountList={this.props.skuCountList}\n              setSkuCountList={this.props.setSkuCountList}\n            />\n          </div>\n          <div className=\"flex flex-column\">\n            <Button\n              style={{ width: \"100%\", marginBottom: 10 }}\n              disabled={this.disableButton()}\n              variant=\"contained\"\n              onClick={() => {\n                this.setState({\n                  dialogOpen: true\n                });\n              }}\n              color=\"primary\"\n            >\n              Submit\n            </Button>\n            <div>{this.getDialogBox()}</div>\n            <Link to=\"/start\" className=\"noLink\">\n              <Button\n                style={{ width: \"100%\" }}\n                variant=\"contained\"\n                color=\"secondary\"\n              >\n                Return\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst ScanPage = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ConnectedReviewPage);\nexport default ScanPage;\n","import React from \"react\";\nimport HeaderPage from \"./HeaderPage/HeaderPage.js\";\nimport CountStartPage from \"./CountStartPage/CountStartPage.js\";\nimport ScanPage from \"./ScanPage/ScanPage.js\";\nimport ReviewPage from \"./ReviewPage/ReviewPage\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router basename=\"/inventory-control\">\n      <div>\n        <Route exact path=\"/\">\n          <HeaderPage />\n        </Route>\n        <Route exact path=\"/start\">\n          <CountStartPage />\n        </Route>\n        <Route exact path=\"/scan\">\n          <ScanPage />\n        </Route>\n        <Route exact path=\"/review\">\n          <ReviewPage />\n        </Route>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import * as ACTION_CONSTANTS from \"./Constants\";\n\nconst initialState = {\n  fixtureId: null,\n  userId: null,\n  skuList: [],\n  startTime: null\n};\nfunction rootReducer(state = initialState, action) {\n  if (action.type === ACTION_CONSTANTS.ADD_SKUS) {\n    return Object.assign({}, state, {\n      skuCountList: action.payload.skuCountList\n    });\n  } else if (action.type === ACTION_CONSTANTS.SCAN_FIXTURE) {\n    return Object.assign({}, state, {\n      fixtureId: action.payload.fixtureId\n    });\n  } else if (action.type === ACTION_CONSTANTS.SET_USER_ID) {\n    return Object.assign({}, state, {\n      userId: action.payload.userId\n    });\n  }\n  return state;\n}\nexport default rootReducer;\n","import { createStore } from \"redux\";\nimport rootReducer from \"./Reducer.js\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./StateManagement/Store.js\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}